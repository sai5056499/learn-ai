import React, { useState } from 'react';
import { Project, ProjectProgress } from '../../types';
import { useAppContext } from '../../context/AppContext';
import ProgressBar from '../common/ProgressBar';
import { WrenchScrewdriverIcon, TrashIcon, ChevronLeftIcon, CloseIcon } from '../common/Icons';

interface ProjectsPageProps {
    onSelectProject: (projectId: string) => void;
    onCreateProject: (topic: string) => void;
    onBackToDashboard: () => void;
}

const NewProjectModal: React.FC<{
    onClose: () => void;
    onCreate: (topic: string) => void;
}> = ({ onClose, onCreate }) => {
    const [topic, setTopic] = useState('');

    const handleCreate = () => {
        if (topic.trim()) {
            onCreate(topic.trim());
        }
    };
    
    return (
        <div className="fixed inset-0 bg-gray-900/50 backdrop-blur-sm flex items-center justify-center z-50 animate-fade-in" onClick={onClose}>
            <div className="bg-white rounded-xl shadow-2xl p-8 w-full max-w-lg border border-gray-200" onClick={e => e.stopPropagation()}>
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-2xl font-bold text-slate-800">New Guided Project</h2>
                    <button onClick={onClose} className="p-1 rounded-full text-gray-400 hover:text-gray-700">
                        <CloseIcon className="w-6 h-6" />
                    </button>
                </div>
                <p className="text-gray-500 mb-6">What would you like to build? The AI will generate a step-by-step project guide for you.</p>
                <input
                    type="text"
                    value={topic}
                    onChange={e => setTopic(e.target.value)}
                    onKeyDown={e => e.key === 'Enter' && handleCreate()}
                    placeholder="e.g., 'Build a weather app with JavaScript'"
                    className="w-full px-4 py-3 bg-gray-50 border-2 border-gray-300 rounded-lg text-slate-800 focus:outline-none focus:ring-2 focus:ring-green-500"
                />
                <button
                    onClick={handleCreate}
                    disabled={!topic.trim()}
                    className="w-full mt-4 px-6 py-3 bg-green-600 text-white font-bold rounded-lg hover:bg-green-500 disabled:bg-gray-400"
                >
                    Generate Project
                </button>
            </div>
        </div>
    )
}

const ProjectsPage: React.FC<ProjectsPageProps> = ({ onSelectProject, onCreateProject, onBackToDashboard }) => {
    const [showNewProjectModal, setShowNewProjectModal] = useState(false);
    const { projects, projectProgressData, handleDeleteProject, error } = useAppContext();

    const calculateProgress = (project: Project) => {
        if (project.steps.length === 0) return 0;
        const completedSteps = projectProgressData[project.id]?.size || 0;
        return (completedSteps / project.steps.length) * 100;
    };

    return (
        <div className="w-full max-w-6xl animate-fade-in">
             <button
                onClick={onBackToDashboard}
                className="flex items-center text-sm text-gray-500 hover:text-green-600 transition-colors mb-4"
                title="Back to Dashboard"
            >
                <ChevronLeftIcon className="h-4 w-4 mr-1" />
                Back to Dashboard
            </button>
            <header className="flex justify-between items-center mb-8">
                <h1 className="text-3xl font-bold text-slate-800 flex items-center gap-3">
                    <WrenchScrewdriverIcon className="w-8 h-8 text-green-500" />
                    My Projects
                </h1>
                <button
                    onClick={() => setShowNewProjectModal(true)}
                    className="px-5 py-2 bg-green-600 text-white font-bold rounded-lg hover:bg-green-500 shadow-lg"
                >
                    + New Project
                </button>
            </header>

            {error && <p className="mb-4 p-4 bg-red-100 text-red-700 rounded-lg">{error}</p>}

            {projects.length === 0 ? (
                 <div className="text-center py-20 px-6 bg-white border-2 border-dashed border-gray-300 rounded-xl">
                    <WrenchScrewdriverIcon className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold text-slate-700">No Projects Yet</h3>
                    <p className="text-gray-500 mt-2 mb-6">Click "New Project" to get a guided-project generated by AI.</p>
                </div>
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    {projects.map(project => {
                        const progress = calculateProgress(project);
                        return (
                            <div key={project.id} className="bg-white rounded-xl p-6 border border-gray-200 shadow-md hover:shadow-xl transition-all flex flex-col justify-between group">
                                <div className="flex-grow">
                                    <h3 className="font-bold text-xl text-slate-800 mb-2">{project.title}</h3>
                                    <p className="text-sm text-gray-500 mb-4 line-clamp-2">{project.description}</p>
                                </div>
                                <div className="flex-shrink-0">
                                     <div className="mb-4">
                                        <ProgressBar progress={progress} />
                                        <p className="text-xs text-gray-500 mt-1 text-right">{Math.round(progress)}% Complete</p>
                                    </div>
                                    <div className="flex justify-between items-center">
                                         <button
                                            onClick={() => onSelectProject(project.id)}
                                            className="px-4 py-2 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-500 text-sm"
                                        >
                                            {progress > 0 && progress < 100 ? 'Continue Project' : 'View Project'}
                                        </button>
                                        <button onClick={() => handleDeleteProject(project.id)} className="p-2 text-gray-400 rounded-full hover:bg-red-50 hover:text-red-500 opacity-0 group-hover:opacity-100 transition-opacity">
                                            <TrashIcon className="w-5 h-5" />
                                        </button>
                                    </div>
                                </div>
                            </div>
                        )
                    })}
                </div>
            )}
            
            {showNewProjectModal && <NewProjectModal onClose={() => setShowNewProjectModal(false)} onCreate={onCreateProject} />}

        </div>
    );
};

export default ProjectsPage;